name: Foodgram app workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r backend/requirements.txt 
    - name: Test with flake8 and django tests
      run: |
        python -m flake8

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker 
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2 
        with:
          context: .
          file: backend/Dockerfile
          push: true
          tags: netzen86/foodgram-back:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - uses: actions/checkout@v2
      - name: Run a multi-line script
        run: |
          mkdir ../build
          cp -TR ./infra/docker-compose.yml. ../build
          tar -cvf files.tar ../build/
          pwd 
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SH_KEY_SRV }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: "files.tar"
          target: "/home/netzen"
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SH_KEY_SRV }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker-compose stop
            sudo docker-compose rm -f backend
            sudo docker images -a | grep "back" | awk '{print $3}' | xargs sudo docker rmi
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} > .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo BE_USERNAME=${{ secrets.BE_USERNAME }} >> .env
            echo BE_FNAME=${{ secrets.BE_FNAME }} >> .env
            echo BE_LNAME=${{ secrets.BE_LNAME }} >> .env
            echo BE_EMAIL=${{ secrets.BE_EMAIL }} >> .env
            echo BE_PASSWORD=${{ secrets.BE_PASSWORD }} >> .env
            echo MEDIA=${{ secrets.MEDIA }} >> .env
            sudo docker-compose up -d

  post_deploy:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: executing remote ssh commands to post_deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SH_KEY_SRV }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker-compose exec -T backend python manage.py migrate
            sudo docker-compose exec -T backend python manage.py createadmin
            sudo docker-compose exec -T backend python manage.py fill_db
            sudo docker-compose exec -T backend python manage.py collectstatic --no-input
  
  send_message:
    runs-on: ubuntu-latest
    needs: post_deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!